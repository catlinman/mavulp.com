
# HTTP to HTTPS redirect
server {
    # Listen on port 80 (HTTP) via IPv4 and IPv6.
    listen 80;
    listen [::]:80;

    # Set domain names to listen under for this directive.
    server_name mavulp.com www.mavulp.com dev.mavulp.com;

    # Redirect to the same address but as an HTTPS connection.
    return 301 https://$server_name$request_uri;
}

# SSL server setup
server {
    # Listen on port 443 (HTTPS) via IPv4 and IPv6.
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

    # Include domain SSL configuration and further security settings.
    include snippets/ssl-mavulp.com.conf;
    include snippets/ssl-params.conf;

    # Include Security Headers.
    include snippets/security-headers.conf;

    # Set the root directory.
	root /srv/mavulp.com/public;

    # Set domain names to listen under for this directive.
	server_name mavulp.com www.mavulp.com dev.mavulp.com;

    # Set custom access and error logs.
	access_log /srv/mavulp.com/private/log/access.log;
	error_log /srv/mavulp.com/private/log/error.log;

    # Pass any errors and access to the default nginx logs. Use the vhosts format.
    access_log /var/log/nginx/access.log vhosts;
    error_log /var/log/nginx/error.log;

    # Set the root file to serve.
    index index.html index.htm;

    # Custom error page configuration.
	error_page 403 = /403.html;
	error_page 404 = /404.html;
	error_page 500 502 503 504 = /500.html;

    # Pass set the robots.txt configuration.
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location / {
        # Serve HTML files and return 404 if not found.
        try_files $uri $uri/ $uri.html =404;

        # Setup additional rules for caching.
        expires 1d;
    }

    location ~*  \.(jpg|jpeg|png|gif|svg|ico|css|js)$ {
        # Static content should expire after a longer period of time.
        expires 7d;

        # We don't have to log these kinds of files.
        access_log off;
    }
}
